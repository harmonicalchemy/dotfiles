#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## File:          $DOTFILES/MacOS/GnuPG/gpg-agent.conf - TEMPLATE
##                Options for gpg-agent running on Mac OS only...
## Created:       2017-004-10 
## Modified:      2020-002-02 
## Author:        Alisha Awen - Siren1@HarmonicAlchemy.productions
## GitHub User:   harmonicalchemy
## Ref:           https://www.gnupg.org/software/index.html
## Repo:          Github.com:harmonicalchemy/dotfiles.git
## Environment:   GnuPG Version 2 on Mac OS only
## 
##             **** IMPORTANT SECURITY NOTE Q4-2019! ****
##
##    Dont use GPG < V2.2 anymore...  When it comes to security
##    all software needs to be as up to date as possible.  That rule applies
##    most importantly to any security related software!  Stay up to date!
##    Don't listen to anyone who says you can still be secure with older 
##    versions... Maybe you can, but why take such a cheap risk?
##    That is my advise... After saying that, I believe Harmonic Alchemy DOTFILES
##    will still work with GnuPG v2.1.11 and later... However, if you can upgrade
##    with out too much pain, I strongly recommend it!  You hvae been warned...
##
## This gpg-agent.conf template file contains GPG Agent configurations for
## running within a Mac OS environment only...  This is the standard
## configuration file read by gpg-agent on startup...
##
## On Mac OS you could GPG Agent as a drop in replacement for SSH Agent.
## GnuPG 2 makes it possible to create PGP subkeys and use those as SSH keys to
## use when connecting to servers and remote services.  I'm still undecided
## as to whether this is a good idea or not...  More and more I am back pedaling
## away from PGP as a general purpose crypotragrapy solution... There are many
## more modern security solutions out there which when used together are less
## error prone than HUGE codebase GnuPG.  Eventually these will replace all the
## things that PGP used to do for me in past years...
##
## You may add any valid long option below on a blank line...  Command line
## abbreviations or the leading dashes are not allowed within the config files...
## Simply add your directive on a blank line like this with no leading dashes:
##
##        your-desired-gpg-directive  directive-setting
##
## NOTE1: All options below are for GnuPG v2.1.11 and later and may not
##        work with earlier versions!
##
## NOTE2: This file is also read after a SIGHUP however only a few options will
##        actually have an effect.
##
## NOTE3: Although this file mirrors the default_gpg-agent.conf in the top level
##        GnuPG folder within this repository I have removed some of the
##        pedigogical notes showing GnuPG defaults, obsolete, and dangerous
##        settings.  This file contains only the directives needed to implement
##        GPG Agent on Mac OS. Please review my default gpg angent settings
##        located in: $DOTFILES/gnupg/default_gpg-agent.conf for more info...
##
## Change Log: (descending chronological order)
##
## 2020-002-02 - Alisha Awen - siren1@HarmonicAlchemy.productions
##     Refreshed this file from changes made to my private .DOTFILES repo
##     Security DueDiligence up to Q1 2020 now...
##
## 2019-011-09 - Alisha Awen - siren1@disroot.org
##     Reviewed, and updated this file for posible security changes since the
##     beginning of 2019, in prep for Harmonic Alchemy DOTFILES V2.0 Q4-2019.
##
## 2019-003-17 - Alisha Awen - siren1@disroot.org
##     GnuPG V2.2 has been out for a while.  I am double checking all my
##     settings below to see if there are any new (more secure) methods to use...
##
## 2018-002-26 - Alisha Awen - siren1@disroot.org
##     Updated this file to use GPG sub-keys...
#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

###
## Enable gpg-agent support for SSH:
## In this mode of operation, the agent does not only implement the gpg-agent
## protocol, but also the agent protocol used by OpenSSH (through a separate
## socket).  Consequently, it's possible to use the gpg-agent as a drop-in
## replacement for the well known ssh-agent.
##
## An SSH authentication sub Key [A] will be used through the agent.  This needs
## to be added to gpg-agent initially through the ssh-add utility. When the subkey
## is added, ssh-add, the agent will ask for the password of the provided key file 
## and send the unprotected key material to the agent... This causes gpg-agent to
## ask for a passphrase, which is to be used for encrypting the newly received key
## and storing it in a gpg-agent specific directory.
##
## More help and discussion about using SSH with GPG here:
##  https://wiki.archlinux.org/index.php/GnuPG#SSH_agent
## and here:
##  https://www.unix-ag.uni-kl.de/~guenther/gpg-agent-for-ssh.html

enable-ssh-support

###
## Which Pin Entry Program to use?
## (the enabled setting below is for pinentry-mac as installed by MacPorts)
## If you use HomeBrew instead of MacPorts, enable option 2...
## If you don't like GUI pinentry-mac, enable option 3. ;-)

## Option 1: Enable this one for pinentry on Mac OS if it was installed by MacPorts:
## NOTE: Disable this one if you enabled one below it! - GOTCHA!

pinentry-program /Applications/MacPorts/pinentry-mac.app/Contents/MacOS/pinentry-mac

## Option 2: Enable this one for pinentry on Mac OS if it was installed by HomeBrew:

#pinentry-program /usr/local/bin/pinentry-mac

## Option 3: Enable this one to use generic plain text Console for Pin Entry:

#pinentry-program /usr/local/bin/pinentry

###
## Keep the display information in memory...  This option directs gpg-agent to
## ignore requests to change the current tty or X window system’s DISPLAY variable
## respectively.  This prevents gpg from occasionally failing with “file not found”
## errors by locking the pinentry to pop up at the tty or display where you started
## the agent.

keep-display

###
## Set the time a cache entry is valid to n seconds...
## The default is 600 seconds. Each time a cache entry is accessed, the entry’s
## timer is reset.  To set an entry’s maximum lifetime, use max-cache-ttl.

default-cache-ttl 600

###
## Set the maximum time a cache entry is valid to n seconds...
## After this time a cache entry will be expired even if it has been accessed recently
## or has been set using gpg-preset-passphrase. The default is 2 hours (7200 seconds). 

max-cache-ttl 7200

###
## Set the time a cache entry used for SSH keys is valid to n seconds...
## The default is 1800 seconds. Each time a cache entry is accessed, the entry’s
## timer is reset.  To set an entry’s maximum lifetime, use max-cache-ttl-ssh.

default-cache-ttl-ssh 1800

###
## Set the maximum time a cache entry used for SSH keys is valid to n seconds...
## After this time a cache entry will be expired even if it has been accessed
## recently or has been set using gpg-preset-passphrase. The default is 2 hours
## (7200 seconds).

max-cache-ttl-ssh 7200

###
## This option allows the use of gpg-preset-passphrase to seed the internal
## cache of gpg-agent with passphrases.

allow-preset-passphrase

#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## END: $DOTFILES/MacOS/GnuPG/gpg-agent.conf - TEMPLATE
#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
