## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  File:          $HOME/.gnupg/gpg-agent.conf - TEMPLATE
#                 Options for gpg-agent running on Mac OS only...
#  Created:       2017-004-10 
#  Author:        Alisha Awen Sheppard
#  Git Username:  harmonicalchemy
#  Ref:           https://www.gnupg.org/software/index.html
#  Repo:          Github.com:harmonicalchemy/dotfiles.git
#  Environment:   GnuPG Version 2 on Mac OS only
#  
#  This gpg-agent.conf template file contains GPG Agent configurations for
#  running within a Mac OS environment only...  This is the standard
#  configuration file read by gpg-agent on startup...
#
#  On Mac OS you can use GPG Agent as a drop in replacement for SSH Agent.
#  GnuPG 2 makes it possible to create PGP subkeys and use those as SSH keys to
#  use when connecting to servers and remote services.
#
#  You may add any valid long option below on a blank line...  Command line
#  abbreviations or the leading dashes are not allowed within the config files...
#  Simply add your directive on a blank line like this with no leading dashes:
#
#         your-desired-gpg-directive  directive-setting
# 
#  This file is also read after a SIGHUP however only a few options will
#  actually have an effect.
# 
#  NOTE1: All options below are for GnuPG v2.1.11 and later...
#
#  NOTE2: Although this file mirrors the default_gpg-agent.conf in the top level
#         GnuPG folder within this repository I have removed all the
#         pedigogical notes showing GnuPG defaults, obsolete, and dangerous
#         settings.  This file contains only the directives needed to implement
#         GPG Agent (as drop in replacement for SSH Agent) on Mac OS Only.
#
#  Change Log: (descending chronological order)
#
#    2019-003-17 - Alisha Awen Sheppard - siren1@disroot.org
#      GnuPG V2.2 has been out for a while.  I am double checking all my
#      settings below to see if there are any new (more secure) methods to use...
#
#    2018-002-26 - Alisha Awen Sheppard - siren1@disroot.org
#      Updated this file to use GPG sub-keys...
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

##
# Enable gpg-agent support for SSH:
# In this mode of operation, the agent does not only implement the gpg-agent
# protocol, but also the agent protocol used by OpenSSH (through a separate
# socket).  Consequently, it's possible to use the gpg-agent as a drop-in
# replacement for the well known ssh-agent.
#
# An SSH authentication sub Key [A] will be used through the agent.  This needs
# to be added to gpg-agent initially through the ssh-add utility. When the subkey
# is added, ssh-add, the agent will ask for the password of the provided key file 
# and send the unprotected key material to the agent... This causes gpg-agent to
# ask for a passphrase, which is to be used for encrypting the newly received key
# and storing it in a gpg-agent specific directory.
#
# More help and discussion about using SSH with GPG here:
#   https://wiki.archlinux.org/index.php/GnuPG#SSH_agent
# and here:
#   https://www.unix-ag.uni-kl.de/~guenther/gpg-agent-for-ssh.html
enable-ssh-support

##
# Use GUI dialog for Pin Entry (Setting below is for Mac OS X)...
# The default for this setting is installation dependent. The default
# configuration name of the default pinentry is "pinentry"...
# if that file does not exist but a pinentry-basic exist the latter is used. 
# For other unix flavors, you will have to search for the best option...
pinentry-program /usr/local/bin/pinentry-mac
# Use Console for Pin Entry (currently disabled but if not set above, this is
# the default)  
#pinentry-program /usr/local/bin/pinentry

##
# Keep the display information in memory...  This option directs gpg-agent to
# ignore requests to change the current tty or X window system’s DISPLAY variable
# respectively.  This prevents gpg from occasionally failing with “file not found”
# errors by locking the pinentry to pop up at the tty or display where you started
# the agent.
keep-display

##
# This option allows the use of gpg-preset-passphrase to seed the internal
# cache of gpg-agent with passphrases.
allow-preset-passphrase

#  END $HOME/.gnupg/gpg-agent.conf
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

