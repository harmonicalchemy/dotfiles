# -*- mode: sh -*-
#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## File:          $HOME/.bash_common
##                Common definitions for both ~/.bash_profile and ~/.bashrc
## Created:       2019-002-16
## Updated:       2020-002-02
## Author:        Alisha Awen - Siren1@HarmonicAlchemy.productions
## Git Username:  harmonicalchemy
## Ref:           https://www.gnu.org/software/bash/
## Repo:          Github.com:harmonicalchemy/dotfiles.git
## Environment:   Linux, BSD, (Qubes 4.0 App VMs) and Mac OS
##                (not for hosted VPS or bare metal servers)
##
## This config file is sourced by both $HOME/.bashrc & $HOME/.bash_profile.
## Using a single file to source common configurations across all environments
## represents the best-practice method to get proper definitions defined and
## exported within Interactive, Non-interactive, and Login shell sessions alike.
## Other methods are not recommended and could cause problems.  On Stackoverflow,
## I know "a-lot-of-guys" are sourcing $HOME/.bashrc within: $HOME/.bash_profile,
## (and I have done so as well in the past) but experts and the Bash manual all
## warn that this can cause problems with unwanted output to stdout...  Doing it 
## that way will break the non-interactivity of rsync as well as many other
## things! You will need non-interactive rsync to automate the deployment/updates
## of your websites!
##
## Usage: Symlink this file from your $HOME directory:
##
##       $HOME> ln -s $TOOLS/pDotfiles/.bash_common $HOME/.bash_common
##
## Note1: If you have a legacy .profile file in your $HOME directory,
##          BASH will source it if it does not find any such .bash_profile in
##          there! ".profile" comes from the "wicked-old-days" I remember ;-)  
##          It's still around only because BASH includes it for backward
##          compatibility and that has preserved it due in part on the laziness
##          of sysAdmins and partly due to distro maintainers accommodating those
##          lazy system Administrators to keep them happy and contented.
##          Backwards compatability on a production machine serves no productive
##          purpose!  The objective is to sail your merchant ship as fast as she
##          can go...
##
## Note2: Adjust: "Top Level Machine Specific Exports:" sections below to fit
##          your specific environment. ($HOME is universal by default). If $HOME
##          is NOT defined by the system already (can't imagine that on unix)
##          then you will have to define $HOME at the top here as well...
##
## Change Log: (descending chronological order)
##
## 2020-002-02 - Alisha Awen - siren1@HarmonicAlchemy.productions
##     Refreshed this file from changes made to my private .DOTFILES repo
##     Security DueDiligence up to Q1 2020 now...
##
## 2019-006-26 - Alisha Awen Sheppard -  siren1@disroot.org
##     HUGE OVERHAUL for Mac OS mostly...  Also added debug print
##     statements... (that will be commented out when not debugging)...
##
## 2019-005-16 - Alisha Awen Sheppard -  siren1@disroot.org
##     This file needed an overhaul after all the troubleshooting over several
##     months (both Mac OS and Linux).  I cleaned this up and also added some
##     settings copied from [vault-pgp] clone of this file which may fix some
##     issues I am having trying to get git-remote-gcrypt to work...  The
##     structure here is now simpler...  I hope I did not break anything!
##     I am on [MWM-work] now.  I will have to test this on Rodrigo next...
##     Still no fix for Emacs environment vars problem... Boot from shell works.
##
## 2019-002-16 - Alisha Awen siren1@disroot.org
##     Created this new file for Bash shell on any machine... Moved a lot of
##     stuff in here that was previously part of $HOME/.bashrc into here...
##     Now I know why I as experiencing so many shell related problems on
##     my old MacBook Pro from many years ago resulting in switching to Zsh. OMG!
#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## To enable/disable DEBUG logging change below to true/false respectively...
## It is on by default... You will probably need that in the beginning. ;-)
## If you need more debug statements elsewhere, use one of these as a template...

export SH_DBG=true

### ~~~~~~~~~~~~~~~~~~~~
## BEGIN: .bash_common Evaluation - Entering File
## DEBUG Print Statements: (Export SH_DBG=true in your shell session to enable)
if [ "$SH_DBG" = true ] ; then
    echo "BASH ENV - Entering & Evaluating:   \$DOTFILES/.bash_common"
fi
### ~~~~~~~~~~~~~~~~~~~~

## Set architecture flags to X86 64bit (all platforms):

export ARCHFLAGS="-arch x86_64"

### ~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  BEGIN: OS Specific Section:
### ~~~~~~~~~~~~~~~~~~~~~~~~~~~

if [[ "$OSTYPE" == "linux-gnu" ]]; then

    ### ~~~~~~~~~~~~~~~~~~~~
    ## BEGIN: Linux Specific Configs...
    ## DEBUG Print Statements: (Export SH_DBG in your shell session to enable)
    if [ "$SH_DBG" = true ] ; then
        echo "\$DOTFILES/.bash_common - BEGIN:  LINUX CASE"
    fi
    ### ~~~~~~~~~~~~~~~~~~~~

    ###
    ## Export Linux specific $PATH:
    ##   
    ##  NOTE1:  Update the single line Path definitions below, from other lines
    ##          that are sometimes programmatically added to the bottom of other
    ##          shell init files after installing things!  Don't let them get all
    ##          tangled up in different places! Keep them all here in one place!
    ##
    ##  NOTE2:  Make sure all /bin directory paths under `/user/local` occur BEFORE
    ##          `/usr/bin` directory paths within the export directive below.
    ##
    ##  NOTE3:  You may need to make adjustments to the default path exports below
    ##          depending on your flavor of unix, and whether you have some of the
    ##          packages/plugins/binaries/libraries installed in a different place.
    ##          But for most cases, the exports already defined below are the default
    ##          paths on Linux and Mac OS.  The .rbenv paths assume you installed
    ##          .rbenv and used it to install ruby. (change it if you don't want it)

    export PATH="$HOME/.bin:$HOME/.local/bin:$HOME/.rbenv/bin:$HOME/.rbenv/plugins/ruby-build/bin:$GOPATH/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:$PATH"

    ## Export Linux Manual $PATH:
    ## TODO: Add this in later...
    
    ###
    ## Qubes Split SSH:
    ## NOTE: This section is only used for Qubes OS machines that use Qubes App
    ##      Split SSH schemes...  If you do that, un-comment the lines in this
    ##      secton...

    ## Set next line to the ssh key vault you want to use

#    SSH_VAULT_VM="vault-ssh"

#    if [ "$SSH_VAULT_VM" != "" ]; then
#	export SSH_AUTH_SOCK=~user/.SSH_AGENT_$SSH_VAULT_VM
#    fi

    ## Qubes Split GPG tweaks... You may or may not need these depending
    ## on above... (but I left them enabled since they won't hurt anything)
    
    alias gpg="/usr/bin/gpg2"
    alias gpq="qubes-gpg-client"
    alias gpw="qubes-gpg-client-wrapper"
    export QUBES_GPG_DOMAIN="vault-pgp"
    export QUBES_GPG_AUTOACCEPT=86400

    ### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ##  Top Level Linux Machine Specific Exports:
    ##  (change these to something else if you need to)
    ### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    ## Define Main GIT Home:

    export GIT=$HOME/000-GIT

    ## Define Main WWW directory

    export WWW=$HOME/WWW

    ### ~~~~~~~~~~~~~~~~~~~~
    ## END: Linux Specific Configs...
    ## DEBUG Print Statements: (Export SH_DBG in your shell session to enable)
    if [ "$SH_DBG" = true ] ; then
        echo "\$DOTFILES/.bash_common - END:    LINUX CASE"
    fi
    ### ~~~~~~~~~~~~~~~~~~~~

elif [[ "$OSTYPE" == "darwin"* ]]; then

    ### ~~~~~~~~~~~~~~~~~~~~
    ## BEGIN: Mac OS Specific Configs...
    ## DEBUG Print Statements: (Export SH_DBG in your shell session to enable)
    if [ "$SH_DBG" = true ] ; then
        echo "\$DOTFILES/.bash_common - BEGIN:  MAC-OS CASE"
    fi
    ### ~~~~~~~~~~~~~~~~~~~~

    ###
    ## Export Mac OS specific $PATH:
    ##  NOTE1:  Update the single line Path definitions below, from other lines
    ##          that are sometimes programmatically added to the bottom of other
    ##          shell init files after installing things!  Don't let them get all
    ##          tangled up in different places! Keep them all here in one place!
    ##
    ##  NOTE2:  Make sure all /bin directory paths under `/user/local` occur BEFORE
    ##          `/usr/bin` directory paths within the export directive below.  This
    ##          is mostly for the sake of Homebrew on Mac OS...
    ##
    ##  NOTE3:  You may need to make adjustments to the default path exports below
    ##          depending on your flavor of unix, and whether you have some of the
    ##          packages/plugins/binaries/libraries installed in a different place.
    ##          But for most cases, the exports already defined below are the default
    ##          paths on Linux and Mac OS.  The .rbenv paths assume you installed
    ##          .rbenv and used it to install ruby. (change it if you don't want it)
    ##

    ## Export Mac OS specific $PATH: (This may be different for older versions of Mac OS)

    export PATH="$HOME/.bin:$HOME/.local/bin:/usr/local/bin:/opt/local/bin:/opt/local/sbin:/Library/TeX/texbin:/usr/X11/bin:$PATH"

    ## Export GNU Info Path: (This may be different for older versions of Mac OS)

    export INFOPATH="/usr/share/info:$IFOPATH"

    ## Export Manual Path: (This may be different for older versions of Mac OS)

##  export MANPATH="???:$MANPATH"

    ### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ##  Top Level Mac OS Machine Specific Exports:
    ##  (change these to something else if you need to)
    ### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    ## Set Default Emacs for programs like cask to use:

    export EMACS="/Path/to-your/installed/MacOS/Emacs"

    ## Define Main GIT Home:

    export GIT=$HOME/Documents/GIT

    ## Define Main WWW directory

    export WWW=$HOME/Documents/WWW
    
    ## Define Path to Jack2 Repo:

    export JACK='/Users/alisha/Documents/001-Harmonic-Alchemy-Productions/Resources/003-Music-Apps/Audio-Loop-Back-Apps/Jack-2/github.src.repo'

    ###
    ## Ensure 'gpg-agent' (not ssh-agent) is running when a SSH client needs it.
    ## NOTE: This assumes you are using a PGP "Auth" [A] subkey instead of the
    ##       standard SSH key with ssh-agent as your local cached SSH key when
    ##       connecting to SSH HOSTS.  If you connect with SSH the standard way
    ##       instead, comment out the next two lines...

    gpg-connect-agent /bye
    export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)

    ### ~~~~~~~~~~~~~~~~~~~~
    ## END: Mac OS Specific Configs...
    ## DEBUG Print Statements: (Export SH_DBG in your shell session to enable)
    if [ "$SH_DBG" = true ] ; then
        echo "\$DOTFILES/.bash_common - END:    MAC-OS CASE"
    fi
    ### ~~~~~~~~~~~~~~~~~~~~

fi

### ~~~~~~~~~~~~~~~~~~~~~~~~~
##  END: OS Specific Section:
### ~~~~~~~~~~~~~~~~~~~~~~~~~

### ~~~~~~~~~~~~~~~~~~~~
## BEGIN: Generic Platform Independent Exports (all unix flavors):
## DEBUG Print Statements: (Export SH_DBG in your shell session to enable)
if [ "$SH_DBG" = true ] ; then
    echo "\$DOTFILES/.bash_common - BEGIN:  Final Generic Section"
fi
### ~~~~~~~~~~~~~~~~~~~~

###
## Export your PGP Primary Key Fingerprint for easy input for commands etc. 

export SFING="0xFFFFAAAA55550000FFFFAAAA55550000FFFFAAA"

###
## Ensure GnuPG gets the output of the 'tty' command.

export GPG_TTY=$(tty)

###
## Use Python & PIP 3 (this may also be needed by shell scripts)

#alias pip="pip3"
alias python="python3"

###
## Define TEXINPUTS for Emacs LaTeX org-mode configurations:

export TEXINPUTS=$HOME/.emacs.d/elpa/auctex-12.2.0/latex

###
## Platform Independent Global Directory Definitions:

## Define Global Path to your Development SandBox (DSB)

export DSB=$GIT/dev-sandbox

## Define Global Path to Tools Presets (for tools like .dotfiles) home directory:

export TOOLS=$GIT/tools-presets

## Define Global Path to public .dotfiles (Github:HarmonicAlchemy)

export DF=$TOOLS/dotfiles

## Define Global Path to My-Docs" home Directory:

export MD=$GIT/My-Docs

## Define your www devOps home directory:

export MWMD=$WWW/devOps

## Define Global Path to your "Personal Templates" home Directory:

export PT=$GIT/Personal-templates

### ~~~~~~~~~~~~~~~~~~~~
## Load NVM: (Node.js, NPM) etc...
## NOTE: This assumes you cloned or installed 'creationix/nvm' from Github locally
##      in your $HOME environment.  The next lines set up that environment for you...
##      If you are not using NVM than comment out this section!!  You will
##      eventually need this for some nice web-apps and tools though!
## DEBUG Print Statements: (Export SH_DBG in your shell session to enable)
if [ "$SH_DBG" = true ] ; then
    echo "\$DOTFILES/.bash_common - LOAD:   NVM Enviornment & Completions"
fi
### ~~~~~~~~~~~~~~~~~~~~

export NVM_DIR="$HOME/.nvm"

## Load nvm:

[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

## Load NVM bash_completion:

[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

### ~~~~~~~~~~~~~~~~~~~~
## Load rbenv Ruby Version Management Tool:
## NOTE: Make sure you have cloned rbenv from Github to $HOME/.rbenv!
##       If you decide not to use rbenv comment out this section and remove
##       the .rbenv paths from above path export line as well...
## DEBUG Print Statements: (Export SH_DBG in your shell session to enable)
if [ "$SH_DBG" = true ] ; then
    echo "\$DOTFILES/.bash_common - LOAD:   Ruby Version Management Tool"
fi
#### ~~~~~~~~~~~~~~~~~~~~

if which rbenv > /dev/null; then
    eval "$(rbenv init -)";
fi

### ~~~~~~~~~~~~~~~~~~~~
## END: Generic Platform Independent Exports (all unix flavors):
## END: ~/.bash_common - Leaving File...
## DEBUG Print Statements: (Export SH_DBG in your shell session to enable)
if [ "$SH_DBG" = true ] ; then
    echo "\$DOTFILES/.bash_common - END:    Final Generic Section - Leaving File"
fi
### ~~~~~~~~~~~~~~~~~~~~

#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## END: $HOME/.bash_common
#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
