# -*- mode: sh -*-
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  $HOME/.bash_common - Common definitions for both ~/.bash_profile and ~/.bashrc
#
#  Author:   Alisha Awen Sheppard - siren1@disroot.org
#  Created:  2019-002-16
#
#  Note1:    This file is sourced by both $HOME/.bashrc & $HOME/.bash_profile.
#            This is the best-practice method to to get common definitions
#            defined and exported within Interactive, Non-interactive, and Login     
#            shell sessions.  Other methods are not recommended and could cause 
#            problems.  On Stackoverflow, I know "a-lot-of-guys" are sourcing
#            $HOME/.bashrc within: $HOME/.bash_profile, (and I have done so as
#            well in the past) but experts and the Bash manual all warn that this
#            can cause problems with unwanted output to stdout...  Doing it that
#            way will break the non-interactivity of rsync as well as many other
#            things! You will need non-interactive rsync to automate the
#            deployment/updates of your websites!
#
#  Note2:    If you have a legacy .profile file in your $HOME directory,
#            BASH will source it if it does not find any such .bash_profile in
#            there! ".profile" comes from the "wicked-old-days" I remember ;-)  
#            It's still around only because BASH includes it for backward
#            compatibility and that has preserved it due in part on the laziness
#            of sysAdmins and partly due to distro maintainers accommodating those
#            lazy system Administrators to keep them happy and contented.
#            Backwards compatability on a production machine serves no productive
#            purpose!  The objective is to sail your merchant ship as fast as she
#            can go...
#
#  Note3:    Adjust: "Top Level Machine Specific Exports:" sections below to fit
#            your specific environment. ($HOME is universal by default). If $HOME
#            is NOT defined by the system already (can't imagine that on unix)
#            then you will have to define $HOME at the top here as well...
#
#  Change Log: (descending chronological order)
#
#    2019-002-16 - Alisha Awen siren1@disroot.org
#      Created this new file for Bash shell on any machine... Moved a lot of
#      stuff into here that was previously part of $HOME/.bashrc...
#      Now I know why I as experiencing so many shell related problems on
#      my old MacBook Pro from many years ago resulting in switching to Zsh. OMG!
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if [[ "$OSTYPE" == "linux-gnu" ]]; then

    #####
    # BEGIN: Linux Specific Configs...
    #####

    ##
    # Qubes Split SSH:
    # NOTE: This section is only used for Qubes OS machines that use Qubes App
    #       Split SSH schemes...  If you do that, un-comment the lines in this
    #       secton...
    #
    # Set next line to the ssh key vault you use:
    #SSH_VAULT_VM="ssh-vault"
    #
    #if [ "$SSH_VAULT_VM" != "" ]; then
    #  export SSH_AUTH_SOCK=~user/.SSH_AGENT_$SSH_VAULT_VM
    #fi

    ##
    # Qubes Split GPG tweaks...
    # NOTE: This section is only used for Qubes OS machines that use Qubes
    #       Split GPG schemes...  If you do that, un-comment the lines below
    #       within this secton and add your public key fingerprint:
    #export QUBES_GPG_DOMAIN="vault-pgp"
    #export QUBES_GPG_AUTOACCEPT=86400
    #export SFING="0x00005555AAAAFFFF00005555AAAAFFFF00005555"
    
    ##
    # Top Level Machine Specific Exports:
    
    # Define Main GIT Home directory: (for all or most of your cloned git projects)
    export GIT=$HOME/000-GIT

    # Define Main WWW directory: (for all or most of your web site and web app projects)
    export WWW=$HOME/WWW
    
    #####
    # END: Linux Specific Configs...
    #####

    
elif [[ "$OSTYPE" == "darwin"* ]]; then

    
    #####
    # BEGIN: Mac OS Specific Configs...
    #####

    ##
    # Top Level Machine Specific Exports:
    
    # Define Main GIT Home directory: (for all or most of your cloned git projects)
    export GIT=$HOME/000-GIT

    # Define Main WWW directory: (for all or most of your web site and web app projects)
    export WWW=$HOME/WWW

    ##
    # Set Homebrew Cask app directory to user's: $HOME/Applications (not system apps)
    export HOMEBREW_CASK_OPTS="--appdir=~/Applications"
    # Define Main WWW directory

    ##
    # Ensure GnuPG gets the output of the 'tty' command.
    GPG_TTY=$(tty)
    export GPG_TTY

    ##
    # Ensure 'gpg-agent' (not ssh-agent) is running when a SSH client needs it.
    # NOTE: This assumes you are using a PGP "Auth" [A] subkey instead of the
    #       standard SSH key with ssh-agent as your local cached SSH key when
    #       connecting to SSH HOSTS.  If you connect with SSH the standard way
    #       instead, comment out the next two lines...
    gpg-connect-agent /bye
    export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
    
    #####
    # END: Mac OS Specific Configs...
    #####
    
else

    ##### 
    # Unknown OS? Huh? LOL! No harm done here as the rest will stick... ;-)
    # TODO: Put Windows Cygwin stuff in here...  Oh My!
    ##### 
    
fi

## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# END OS Specific Section:
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The rest below is common to all flavors of unix:
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Use Python & PIP 3 (this may also be needed by shell scripts)
alias pip="pip3"
alias python="python3"

##
# Platform Independent Global Directory Definitions:
# NOTE: These are suggested defaults... Adjust these as needed for your own
#       environment setup...
##

# Define Global Path to Tools Presets (for tools like .dotfiles) home directory:
export TOOLS=$GIT/Gen-Dat/tools-presets

# Define Global Path to public .dotfiles (Github:HarmonicAlchemy)
export DF=$TOOLS/dotfiles

# Define Global Path to your "Personal Docs" home Directory:
export PD=$GIT/Gen-Dat/personal-docs

# Define Global Path to your "Personal Templates" home Directory:
export PT=$GIT/Doc-Templates/Personal-templates

##
# Set PATH:
#   NOTE1:  Update the single line Path definitions below, from other lines
#           that are sometimes programmatically added to the bottom of other
#           shell init files after installing things!  Don't let them get all
#           tangled up in different places! Keep them all here in one place!
#
#   NOTE2:  Make sure all /bin directory paths under `/user/local` occur BEFORE
#           `/usr/bin` directory paths within the export directive below.  This
#           is mostly for the sake of Homebrew on Mac OS...
#
#   NOTE3:  You may need to make adjustments to the default path exports below
#           depending on your flavor of unix, and whether you have some of the
#           packages/plugins/binaries/libraries installed in a different place.
#           But for most cases, the exports already defined below are the default
#           paths on Linux and Mac OS.  The .rbenv paths assume you installed
#           .rbenv and used it to install ruby. (change it if you don't want it)
##

if [[ "$OSTYPE" == "linux-gnu" ]]; then

    # Export Linux specific $PATH:

    export PATH="$HOME/.bin:$HOME/.rbenv/bin:$HOME/.rbenv/plugins/ruby-build/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:$PATH"

elif [[ "$OSTYPE" == "darwin"* ]]; then

    # Export Mac OS specific $PATH: (This may be different for older versions of Mac OS...)
    export PATH="$HOME/.bin:/usr/local/bin:/usr/local/sbin:/usr/X11/bin:/usr/local/opt/php@7.2/bin:/usr/local/opt/php@7.2/sbin:$PATH"

#else

    ##### 
    # Save this part for possible Windows Cygwin path definitions...  Oh My!
    ##### 

fi

##
# Load NVM: (Node.js, NPM) etc...
# NOTE: This assumes you cloned or installed 'creationix/nvm' from Github locally
#       in your $HOME environment.  The next lines set up that environment for you...
#       If you are not using NVM than comment out this section!!  You will
#       eventually need this for some nice web-apps and tools though!
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
# Load NVM bash_completion:
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"


##
# Load rbenv Ruby Version Management Tool:
# NOTE: Make sure you have cloned rbenv from Github to $HOME/.rbenv!
#       If you decide not to use rbenv comment out this section and remove
#       the .rbenv paths from above path export line as well...
#if which rbenv > /dev/null; then
    eval "$(rbenv init -)";
#fi

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  END ~/.bash_common
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

