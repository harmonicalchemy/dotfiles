## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  File:          $HOME/.gnupg/gpg-agent.conf - TEMPLATE
#  Created:       2017-004-10 
#  Author:        Alisha Awen Sheppard
#  Git Username:  harmonicalchemy
#  Ref:           https://www.gnupg.org/software/index.html
#  Repo:          Github.com:harmonicalchemy/dotfiles.git
#  Environment:   GnuPG Version 2 on any machine that supports it...
#
#  This file represents my current best practice configuration for GnuPG,
#  V2 (including recommended default settings already set without this file)
#  Use this as a template for any machines or VMs you configure with GPG2.
#
#  Although this file was tailor made for a Qubes OS based system, there is
#  nothing fancy about it.  This config file contains standard gpg-agent
#  configuration directives used by a running gpg-agent.
#  You may add any valid long option here on a blank line...  Command line
#  abbreviations or the leading dashes are not allowed within the config files...
#  Simply add your directive on a blank line like this with no leading dashes:
#
#         your-desired-gpg-directive directive-setting
#
#  NOTE1: All options below are for GnuPG v2.1.11 and later and may not
#         work with earlier versions!
#
#  NOTE2: This file is also read after a SIGHUP however only a few options will
#         actually have an effect.
#
#  NOTE3: This file is to be used as a template for you to study and implement
#         within you own computing environments.  Some options listed below are
#         actually the default for GnuPG after v2.1.11 and don't need to be
#         duplicated here. I have added those directives below disabled
#         (commented out) for pedagogical purposes and added helpful comments
#         (exerpts from the manual) to give you a synopsis of what they are for.
#         Also there are notes below about settings that should never be set! 
#         This can help tremendusly later when you are digging through this code
#         worried about some security issue being discussed within a sea of
#         Reddit or Stack Overflow posts that may caused concern about something
#         you had long forgotten the details about.  Right from within this file
#         (which is probably the first place you would look, you can find the
#         item and then jump to the official docs, and release notes for
#         conformation.  It's also wize to keep up with the expert infoSec blog
#         posts as well.  Study expert hackers (i.e., DEF CON) especially if you
#         are brave enough to learn those geeky things!  Be informed!
#
#  Change Log: (descending chronological order)
#
#    2019-003-17 - Alisha Awen Sheppard - siren1@disroot.org
#      GnuPG V2.2 has been out for a while.  I am double checking all my
#      settings below to see if there are any new (more secure) methods to use...
#
#    2018-004-20 - Alisha Awen Sheppard - siren1@disroot.org
#      Prepaired for public use - generic
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Enable gpg-agent support for SSH... (Yes you can do this now!)
# In this mode of operation, the agent does not only implement the gpg-agent
# protocol, but also the agent protocol used by OpenSSH (through a separate socket).
# Consequently, it should be possible to use the gpg-agent as a drop-in
# replacement for the well known ssh-agent.
# SSH Keys, which are to be used through the agent, need to be added to the
# gpg-agent initially through the ssh-add utility. When a key is added, ssh-add
# will ask for the password of the provided key file and send the unprotected
# key material to the agent; this causes the gpg-agent to ask for a passphrase,
# which is to be used for encrypting the newly received key and storing it in a
# gpg-agent specific directory.
# More help and discussion about using SSH with GPG here:
#   https://wiki.archlinux.org/index.php/GnuPG#SSH_agent
# and here:
#   https://www.unix-ag.uni-kl.de/~guenther/gpg-agent-for-ssh.html
# If you decide to do this, you will need to create an authentication sub key off
# your master PGP key that you use currently...  And once set up enable this directive
# by un-commenting it...
#enable-ssh-support

# Use GUI dialog for Pin Entry (Setting below is for Mac OS X)...
# The default for this setting is installation dependent. The default
# configuration name of the default pinentry is "pinentry"...
# if that file does not exist but a pinentry-basic exist the latter is used. 
# For other unix flavors, you will have to search for the best option...
#pinentry-program /usr/local/bin/pinentry-mac
# Use Console for Pin Entry (disable this one if you have another) this is default.
pinentry-program /usr/local/bin/pinentry

# Keep the display information in memory...  This option directs gpg-agent to
# ignore requests to change the current tty or X window system’s DISPLAY variable
# respectively.  This prevents gpg from occasionally failing with “file not found”
# errors by locking the pinentry to pop up at the tty or display where you started
# the agent.
keep-display

# Include an extra socket for remote gpg-agent SSH forwarding...
# This directive instructs gpg to also listen on native gpg-agent connections on the
# given socket. This is for a setup where a Unix domain socket forwarding from a remote
# machine to this socket on the local machine.  A gpg running on the remote machine may
# then connect to the local gpg-agent and use its private keys. This allows to decrypt
# or sign data on a remote machine without exposing the private keys to the remote machine. 
#extra-socket ~/.gnupg/S.gpg-agent.remote

# Set the time a cache entry is valid to n seconds...
# The default is 600 seconds. Each time a cache entry is accessed, the entry’s timer is reset.
# To set an entry’s maximum lifetime, use max-cache-ttl.
#default-cache-ttl 600

# Set the maximum time a cache entry is valid to n seconds...
# After this time a cache entry will be expired even if it has been accessed recently
# or has been set using gpg-preset-passphrase. The default is 2 hours (7200 seconds). 
#max-cache-ttl 7200

# Set the time a cache entry used for SSH keys is valid to n seconds...
# The default is 1800 seconds. Each time a cache entry is accessed, the entry’s timer is reset.
# To set an entry’s maximum lifetime, use max-cache-ttl-ssh.
#default-cache-ttl-ssh 1800

# Set the maximum time a cache entry used for SSH keys is valid to n seconds...
# After this time a cache entry will be expired even if it has been accessed recently or has
# been set using gpg-preset-passphrase. The default is 2 hours (7200 seconds).
#max-cache-ttl-ssh 7200

# This option allows the use of gpg-preset-passphrase to seed the internal cache of
# gpg-agent with passphrases.
allow-preset-passphrase

# FYI - These Are Outdated Options as of v2.1.11
# Never Enable any of these settings!
# If you read about it somewhere that doc is way old!  Forget it...
#write-env-file
# Since GnuPG 2.1 the standard socket is always used, therefore this option has no effect.
#use-standard-socket

