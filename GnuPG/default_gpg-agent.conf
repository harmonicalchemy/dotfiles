##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## File:      ~/.gnupg/gpg-agent.conf - TEMPLATE
## Created:   2017-Apr-10 - Alisha Awen, Siren1@disroot.org
## Modified:  2018-Apr-20 - (prepaired for public use - generic)
##
## This file represents my current best practice configuration for GnuPG,
## (including recommended default settings already set without this file)
## Use this as a template for any machines or VMs you configure with GPG2.
##
## This is the standard configuration file read by gpg-agent on startup.
## You may add any valid long option here on a blank line...
## Command abbreviations or the leading dashes are not allowed...
## Simpley add: your-desired-gpg-agent-option-like-this
##
## This file is also read after a SIGHUP however only a few options will
## actually have an effect.
##
## NOTE:  All options below are for GnuPG v2.1.11 and later and may not
##        work with earlier versions!
##
## Some options set explicitly below are actually the default for GnuPG after
## v2.1.11 and don't need to be duplicated here. I went ahead and set those
## directives below for pedagogical purposes, (along with helpful comments).
## Also there are notes about settings that should never be set!
## This can help tremendusly later when you are digging through this code
## worried about some security issue being discussed within a sea of reddit or
## Stack Overflow posts that may caused concern about something you had long
## forgotten the details about.  From there you can jump to the official docs,
## and release notes for conformation...
## It's also wize to keep up with the expert's blog posts as well)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## Enable gpg-agent support for SSH... (Yes you can do this now!)
## In this mode of operation, the agent does not only implement the gpg-agent
## protocol, but also the agent protocol used by OpenSSH (through a separate socket).
## Consequently, it should be possible to use the gpg-agent as a drop-in
## replacement for the well known ssh-agent.
## SSH Keys, which are to be used through the agent, need to be added to the
## gpg-agent initially through the ssh-add utility. When a key is added, ssh-add
## will ask for the password of the provided key file and send the unprotected
## key material to the agent; this causes the gpg-agent to ask for a passphrase,
## which is to be used for encrypting the newly received key and storing it in a
## gpg-agent specific directory.
## More help and discussion about using SSH with GPG here:
##   https://wiki.archlinux.org/index.php/GnuPG#SSH_agent
## and here:
##   https://www.unix-ag.uni-kl.de/~guenther/gpg-agent-for-ssh.html
## If you decide to do this, you will need to create an authentication sub key off
## your master PGP key that you use currently...  And once set up enable this directive
## by un-commenting it...
#enable-ssh-support

# Use GUI dialog for Pin Entry (Setting below is for Mac OS X)...
# The default for this setting is installation dependent. The default
# configuration name of the default pinentry is "pinentry"...
# if that file does not exist but a pinentry-basic exist the latter is used. 
# For other unix flavors, you will have to search for the best option...
pinentry-program /usr/local/bin/pinentry-mac
# Use Console for Pin Entry (currently disabled but if not set above, this is default)  
#pinentry-program /usr/local/bin/pinentry

# Keep the display information in memory...  This option directs gpg-agent to
# ignore requests to change the current tty or X window system’s DISPLAY variable
# respectively.  This prevents gpg from occasionally failing with “file not found”
# errors by locking the pinentry to pop up at the tty or display where you started
# the agent.
keep-display

# Include an extra socket for remote gpg-agent SSH forwarding...
# This directive instructs gpg to also listen on native gpg-agent connections on the
# given socket. This is for a setup where a Unix domain socket forwarding from a remote
# machine to this socket on the local machine.  A gpg running on the remote machine may
# then connect to the local gpg-agent and use its private keys. This allows to decrypt
# or sign data on a remote machine without exposing the private keys to the remote machine. 
extra-socket ~/.gnupg/S.gpg-agent.remote

# Set the time a cache entry is valid to n seconds...
# The default is 600 seconds. Each time a cache entry is accessed, the entry’s timer is reset.
# To set an entry’s maximum lifetime, use max-cache-ttl.
default-cache-ttl 600

# Set the maximum time a cache entry is valid to n seconds...
# After this time a cache entry will be expired even if it has been accessed recently
# or has been set using gpg-preset-passphrase. The default is 2 hours (7200 seconds). 
max-cache-ttl 7200

# Set the time a cache entry used for SSH keys is valid to n seconds...
# The default is 1800 seconds. Each time a cache entry is accessed, the entry’s timer is reset.
# To set an entry’s maximum lifetime, use max-cache-ttl-ssh.
default-cache-ttl-ssh 1800

# Set the maximum time a cache entry used for SSH keys is valid to n seconds...
# After this time a cache entry will be expired even if it has been accessed recently or has
# been set using gpg-preset-passphrase. The default is 2 hours (7200 seconds).
max-cache-ttl-ssh 7200

# This option allows the use of gpg-preset-passphrase to seed the internal cache of
# gpg-agent with passphrases.
allow-preset-passphrase

# FYI - These Are Outdated Options as of v2.1.11
# Never Enable any of these settings!
# If you read about it somewhere that doc is way old!  Forget it...
#write-env-file
# Since GnuPG 2.1 the standard socket is always used, therefore this option has no effect.
#use-standard-socket

