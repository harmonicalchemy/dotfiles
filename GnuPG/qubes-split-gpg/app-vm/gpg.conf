##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## File:      [Qubes-App-VM]:~/.gnupg/gpg.conf - TEMPLATE
## Created:   2017-Apr-10 - Alisha Awen, Siren1@disroot.org
## Modified:  2018-Apr-20 - (prepaired for public use - generic)
##
## Options for GnuPG running within the network enabled Qubes Split GPG Front End
## AppVM Domain... The Qubes Split GPG front end is network emabled through
## [sys-firewall].  No secret keys are stored in this domain...
##
## Reference: https://www.qubes-os.org/doc/split-gpg/ - This will show you how ;-)
##
## This fount end is mostly used for email using Thunderbird with the enigma plugin
## via qubes-split-gpg backend for GPG integration... This could also be used for a
## development app domain that needs to enable git to use gpg from the backend...
##
## This file represents my current best practice configuration for GnuPG,
## running on a Qubes based system.  Use this as a template if you are looking
## to configure a Qubes based system in a similar way.  (it is probably the
## most secure way to use GPG2).
##
## This standard gpg configuration file is read by the GPG configuration
## parser upon running of each command.  You may add any valid long option here
## on a blank line... Command line abbreviations or the leading dashes are not
## allowed within the config files... Simpley add: your-desired-option-like-this.
##
## NOTE:  All options below are for GnuPG v2.1.11 and later and may not
##        work with earlier versions!
##
## Some options set explicitly below are actually the default for GnuPG after
## v2.1.11 and don't need to be duplicated here. I went ahead and set those
## directives below for pedagogical purposes, (along with helpful comments).
## Also there are notes about settings that should never be set!
## This can help tremendusly later when you are digging through this code
## worried about some security issue being discussed within a sea of reddit or
## Stack Overflow posts that may caused concern about something you had long
## forgotten the details about.  From there you can jump to the official docs,
## and release notes for conformation...
## It's also wize to keep up with the expert's blog posts as well)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## default key
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# The default key to sign with. If this option is not used, the default key
# is the first key found in the secret keyring... (replace with your fingerprint)
default-key 0x00005555AAAAFFFF00005555AAAAFFFF00005555


##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## algorithm and ciphers
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

personal-compress-preferences ZLIB BZIP2 ZIP

# list of personal cipyer preferences. When multiple digests are supported by
#  all recipients, choose the strongest one
personal-cipher-preferences AES256 CAMELLIA256 AES192 AES CAMELLIA192 TWOFISH

# list of personal digest preferences. When multiple ciphers are supported by
#  all recipients, choose the strongest one
personal-digest-preferences SHA512 SHA384 SHA256 SHA224

# This preference list is used for new keys and becomes the default for
#  "setpref" in the edit menu
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed

# message digest algorithm used when signing a key
cert-digest-algo SHA512
s2k-digest-algo SHA512
s2k-cipher-algo AES256

# Selects how the passphrases for symmetric encryption is mangled.
#   s2k-mode "n"
# If n=0 a plain passphrase (which is in general not recommended) will be used...
# If n=1 a salt (which should also not be used) is added to the passphrase...
# If n=3 or no option set (i.e., the default) it iterates the whole process a
# number of times...  (see --s2k-count)
# I set the default option below explicitly...
s2k-mode 3


##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## general behavior
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Get rid of the copyright notice and other messages.  I have seen enough already ;-)
#no-greeting
#no-secmem-warning

# Disable inclusion of the version string in ASCII armored output...
#NOTE: This is the default for GnuPG v2.1 but it's set explicitly here anyway...
no-emit-version

# Disable using a comment string in cleartext signatures and ASCII armored messages
# or keys (see --armor). I do not want meta data like this in my sigs or messages...
# NOTE: This is the default behavior but I am setting it here explicitly anyway...
no-comments

# How to Display key IDs
# "none" omits the short ID and instead shows the key's full
# fingerprint on a separate line.  "0xlong" displays the longer
# more accurate 16-char key ID.  I choose none because I always
# use the much more secure key fingerprint for all operations...
keyid-format none

# Always show full fingerprints of keys List, (all keys or the specified ones)
with-fingerprint
with-keygrip

# Display the calculated validity of user IDs during key listings.
# NOTE: This option defaults to yes, but set here explicitly anyway...
list-options show-uid-validity  

# Display the calculated validity of user IDs on key that issued the signature.
# NOTE: This option defaults to yes, but set here explicitly anyway...
verify-options show-uid-validity

# When verifying a signature made from a subkey, ensure that the cross certification
# "back signature" on the subkey is present and valid. This protects against a subtle
# attack against subkeys that can sign.
# NOTE: This option defaults to --require-cross-certification for gpg2 but I have
# explicitly set it here anyway...
require-cross-certification

# If you do not pass a recipient to gpg, it will ask for one.  Using
# this option you can encrypt to a default key.  Key validation will
# not be done in this case.  The second form uses the default key as
# default recipient.

#default-recipient some-user-id
#default-recipient-self

# If you do not use the Latin-1 (ISO-8859-1) charset, you should tell
# GnuPG which is the native character set.  Please check the man page
# for supported character sets.  This character set is only used for
# metadata and not for the actual message which does not undergo any
# translation.  Note that future version of GnuPG will change to UTF-8
# as default character set.

charset utf-8


##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## keyserver Options (OBSOLETE)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# --keyserver This option is deprecated - please use the --keyserver
# in dirmngr.conf instead.  This depreciated option specifys the server
# that --recv-keys, --send-keys, and --search-keys will communicate with
# to receive, send, and search for keys...
#
# NOTE: Do not set this option here anymore!  Set it in dirmngr.conf instead...
# (Read comments about all this in dirmngr.conf first! Things have changed!)
#keyserver hkps://hkps.pool.sks-keyservers.net

# NOTE: no-honor-keyserver-url is set by default in GPG2.  I have disabled it here
# explicitly to show the implied gpg2 default best practice configuration...
keyserver-options no-honor-keyserver-url

# If --auto-key-retrieve is used, and the signature being verified has a PKA
# record, then use the PKA info to fetch the key. This option defaults to YES!
# I am opting to disable it here for tighter security.  I don't enable
# --auto-key-retrieve for the same reasons...
keyserver-options no-honor-pka-record
keyserver-options no-auto-key-retrieve

# Automatic key location - Locate a key using what has been defined by the
# --kyeyserver option within dirmngr.conf:
auto-key-locate keyserver

