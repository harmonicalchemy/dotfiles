##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## ~/.gnupg/gpg.conf - Template
## Last Modified:  2017-012-16 - Alisha Awen Siren1@HarmonicAlchemy.Productions
## This is my default gpg.conf for all systems...  It is stored in KeePassX
## along with other gpg related config files...  Use this as a template
## for all machines or VMs you configure with GPG.
##
## NOTE:  All options below are for GnuPG v2.1.11 and later...  Other options
## are necessary for GnuPG version 1 (a completely different animal)
## Unless you specify which option file to use (with the command line
## option "--options filename"), GnuPG uses this file: ~/.gnupg/gpg.conf
## by default.
##
## NOTE: Many options set explicitly below are actually the default for
## GnuPG v2.1.  I set them here in order to explicitly show my global best
## practice configuration for GnuPG (including defaults)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# default key
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# The default key to sign with. If this option is not used, the default key
# is the first key found in the secret keyring...
#default-key 0x0xC5E566AFAC0A1B66A402323CE104985A2DCA3575


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# algorithm and ciphers
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

personal-compress-preferences ZLIB BZIP2 ZIP

# list of personal cipyer preferences. When multiple digests are supported by
#  all recipients, choose the strongest one
personal-cipher-preferences AES256 CAMELLIA256 AES192 AES CAMELLIA192 TWOFISH

# list of personal digest preferences. When multiple ciphers are supported by
#  all recipients, choose the strongest one
personal-digest-preferences SHA512 SHA384 SHA256 SHA224

# This preference list is used for new keys and becomes the default for
#  "setpref" in the edit menu
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed

# message digest algorithm used when signing a key
cert-digest-algo SHA512
s2k-digest-algo SHA512
s2k-cipher-algo AES256

# Selects how the passphrases for symmetric encryption is mangled.
#   s2k-mode "n"
# If n=0 a plain passphrase (which is in general not recommended) will be used...
# If n=1 a salt (which should also not be used) is added to the passphrase...
# If n=3 or no option set (i.e., the default) it iterates the whole process a
# number of times...  (see --s2k-count)
# I set the default option below explicitly...
s2k-mode 3


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# general behavior
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Get rid of the copyright notice and other messages.  I have seen enough already ;-)
#no-greeting
#no-secmem-warning

# Disable inclusion of the version string in ASCII armored output...
#NOTE: This is the default for GnuPG v2.1 but it's set explicitly here anyway...
no-emit-version

# Disable using a comment string in cleartext signatures and ASCII armored messages
# or keys (see --armor). I do not want meta data like this in my sigs or messages...
# NOTE: This is the default behavior but I am setting it here explicitly anyway...
no-comments

# How to Display key IDs
# "none" omits the short ID and instead shows the key's full
# fingerprint on a separate line.  "0xlong" displays the longer
# more accurate 16-char key ID.  I choose none because I always
# use the much more secure key fingerprint for all operations...
keyid-format none

# Always show full fingerprints of keys List, (all keys or the specified ones)
with-fingerprint
with-keygrip

# Display the calculated validity of user IDs during key listings.
# NOTE: This option defaults to yes, but set here explicitly anyway...
list-options show-uid-validity  

# Display the calculated validity of user IDs on key that issued the signature.
# NOTE: This option defaults to yes, but set here explicitly anyway...
verify-options show-uid-validity

# Try to use the GnuPG-Agent. With this option, GnuPG first tries to connect to
#  the agent before it asks for a passphrase.
# NOTE: This is dummy option in gpg2. gpg always starts the agent by default now...
#use-agent

# Do not merge primary user ID and primary key...
# Since GnuPG 2.0.10, this mode is always used and thus this option is obsolete...
#fixed-list-mode

# When verifying a signature made from a subkey, ensure that the cross certification
# "back signature" on the subkey is present and valid. This protects against a subtle
# attack against subkeys that can sign.
# NOTE: This option defaults to --require-cross-certification for gpg2 but I have
# explicitly set it here anyway...
require-cross-certification

# If you do not pass a recipient to gpg, it will ask for one.  Using
# this option you can encrypt to a default key.  Key validation will
# not be done in this case.  The second form uses the default key as
# default recipient.

#default-recipient some-user-id
#default-recipient-self

# By default GnuPG creates version 4 signatures for data files as
# specified by OpenPGP.  Some earlier (PGP 6, PGP 7) versions of PGP
# require the older version 3 signatures.  Setting this option forces
# GnuPG to create version 3 signatures.

#force-v3-sigs

# Because some mailers change lines starting with "From " to ">From "
# it is good to handle such lines in a special way when creating
# cleartext signatures; all other PGP versions do it this way too.
# To enable full OpenPGP compliance you may want to use this option.

#no-escape-from-lines

# If you do not use the Latin-1 (ISO-8859-1) charset, you should tell
# GnuPG which is the native character set.  Please check the man page
# for supported character sets.  This character set is only used for
# metadata and not for the actual message which does not undergo any
# translation.  Note that future version of GnuPG will change to UTF-8
# as default character set.

charset utf-8

# Group names may be defined like this:
#   group mynames = paige 0x12345678 joe patti
#
# Any time "mynames" is a recipient (-r or --recipient), it will be
# expanded to the names "paige", "joe", and "patti", and the key ID
# "0x12345678".  Note there is only one level of expansion - you
# cannot make a group that points to another group.  Note also that
# if there are spaces in the recipient name, this will appear as two
# recipients.  In these cases it is better to use the key ID.

#group mynames = paige 0x12345678 joe patti

# Some old Windows platforms require 8.3 filenames.  If your system
# can handle long filenames, uncomment this.

#no-mangle-dos-filenames

# Lock the file only once for the lifetime of a process.  If you do
# not define this, the lock will be obtained and released every time
# it is needed - normally this is not needed.

#lock-once

# Uncomment this line to display photo user IDs in key listings and
# when a signature from a key with a photo is verified.

#show-photos

# Use this program to display photo user IDs
#
# %i is expanded to a temporary file that contains the photo.
# %I is the same as %i, but the file isn't deleted afterwards by GnuPG.
# %k is expanded to the key ID of the key.
# %K is expanded to the long OpenPGP key ID of the key.
# %t is expanded to the extension of the image (e.g. "jpg").
# %T is expanded to the MIME type of the image (e.g. "image/jpeg").
# %f is expanded to the fingerprint of the key.
# %% is %, of course.
#
# If %i or %I are not present, then the photo is supplied to the
# viewer on standard input.  If your platform supports it, standard
# input is the best way to do this as it avoids the time and effort in
# generating and then cleaning up a secure temp file.
#
# The default program is "xloadimage -fork -quiet -title 'KeyID 0x%k' stdin"
# On Mac OS X and Windows, the default is to use your regular JPEG image
# viewer.
#
# Some other viewers:
# photo-viewer "qiv %i"
# photo-viewer "ee %i"
# photo-viewer "display -title 'KeyID 0x%k'"
#
# This one saves a copy of the photo ID in your home directory:
# photo-viewer "cat > ~/photoid-for-key-%k.%t"
#
# Use your MIME handler to view photos:
# photo-viewer "metamail -q -d -b -c %T -s 'KeyID 0x%k' -f GnuPG"


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# keyserver Options...
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# --keyserver This option is deprecated - please use the --keyserver
# in dirmngr.conf instead.  This depreciated option specifys the server
# that --recv-keys, --send-keys, and --search-keys will communicate with
# to receive, send, and search for keys...
#
# NOTE: Do not set this option here anymore!  Set it in dirmngr.conf instead...
# (Read comments about all this in dirmngr.conf first! Things have changed!)
#keyserver hkps://hkps.pool.sks-keyservers.net

# Don't leak DNS, see https://trac.torproject.org/projects/tor/ticket/2846
# This option no longer exists in GPG2, but Miroslav Rovis *thinks* that if
# you really want to, you can disable SRV lookups by explicitly specifying a
# port number when setting the keyserver in dirmngr.conf, as in:
#   keyserver hkps.pool.sks-keyservers.net:443
#keyserver-options no-try-dns-srv

# When using --refresh-keys, if the key in question has a preferred keyserver
#  URL, then disable use of that preferred keyserver to refresh the key.
#
#  This is useful because:
#   (1) it prevents someone from designating an insecure method
#       for pulling their key.
#   (2) if the server designated uses hkps, the refresh will fail because
#       the ca-cert will not match, so the keys will never be refreshed.
#
#  Note: An attacker could designate a keyserver that they control to monitor
#        when or from where you refresh their key.
#
# NOTE: no-honor-keyserver-url is set by default in GPG2.  I have disabled it here
# explicitly to show the implied gpg2 default best practice configuration...
keyserver-options no-honor-keyserver-url

# If --auto-key-retrieve is used, and the signature being verified has a PKA
# record, then use the PKA info to fetch the key.  This option defaults to YES!
# I am opting to disable it here for tighter security.  I don't enable
# --auto-key-retrieve for the same reasons...
keyserver-options no-honor-pka-record
keyserver-options no-auto-key-retrieve

# Automatic key location - Locate a key using what has been defined by the
# --kyeyserver option within dirmngr.conf
auto-key-locate keyserver

## END ~/.gnupg/gpg.conf - Template
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
