# -*- mode: sh -*-
#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## File:          $HOME/.bash_common
##                Common definitions for both ~/.bash_profile and ~/.bashrc
## Created:       2019-002-16
## Updated:       2021-012-22
## Author:        Alisha Awen - Siren1@disroot.org
## Copyright:     (Â© 2019 - 2022 by Alisha Awen, Siren1@disroot.org, all rights reserved)
## Git Username:  harmonicalchemy
## Ref:           https://www.gnu.org/software/bash/
## Repo:          https://github.com/harmonicalchemy/dotfiles.git
## Licence:       GNU General Public License v3.0
## Environment:   Linux, BSD, (Qubes 4.0 nx App VMs) and Mac OS
##                (not for hosted servers)

## NOTE: Many of the settings below are done to make this file work out-of-box
##       with Harmonic Alchemy Modular Emacs (git repo hosted in same GitHub
##       account as this repository... If you are not using Modular Emacs
##       you should probably remove most of that stuff... sorry for the
##       extra stuff... %^)

## This config file is sourced by both $HOME/.bashrc & $HOME/.bash_profile.
## Using a single file to source common configurations across all environments
## represents the best-practice method to get proper definitions defined and
## exported within Interactive, Non-interactive, and Login shell sessions alike.
## Other methods are not recommended and could cause problems.  On Stackoverflow,
## I know "a-lot-of-guys" are sourcing $HOME/.bashrc within: $HOME/.bash_profile,
## (and I have done so as well in the past) but experts and the Bash manual all
## warn that this can cause problems with unwanted output to stdout...  Doing it 
## that way will break the non-interactivity of rsync as well as many other
## things! You will need non-interactive rsync to automate the deployment/updates
## of your websites!
## Your robots will thank you for not asking them to speak human! %^)

###
## Usage: Symlink this file from your $HOME directory:
##
##       $HOME> ln -s $DOTFILES/.bash.d/.bash_common ~/.bash_common

###
## Note1: If you have a legacy .profile file in your $HOME directory,
##          BASH will source it if it does not find any such .bash_profile in
##          there! ".profile" comes from the "wicked-old-days" I remember ;-)  
##          It's still around only because BASH includes it for backward
##          compatibility and that has preserved it due in part on the laziness
##          of sysAdmins and partly due to distro maintainers accommodating those
##          lazy system Administrators to keep them happy and contented.
##          Backwards compatability on a production machine serves no productive
##          purpose!  The objective is to sail your merchant ship as fast as she
##          can go...

## Note2: Adjust: "Top Level Machine Specific Exports:" sections below to fit
##          your specific environment. ($HOME is universal by default). If $HOME
##          is NOT defined by the system already (can't imagine that on unix)
##          then you will have to define $HOME at the top here as well...

###
## Change Log: (descending chronological order)

## 2021-012-22 - Alisha Awen - Siren1@disroot.org
##     Updated this file and put it in new .bash.d sub-directory:
##     .DOTFILES Security DueDiligence done up to: Q4 2021 now...

## 2020-002-02 - Alisha Awen - siren1@disroot.org
##     Refreshed this file from changes made to my private .DOTFILES repo
##     Security DueDiligence up to Q1 2020 now...

## 2019-006-26 - Alisha Awen Sheppard -  siren1@disroot.org
##     HUGE OVERHAUL for Mac OS mostly...  Also added debug print
##     statements... (that will be commented out when not debugging)...

## 2019-005-16 - Alisha Awen Sheppard -  siren1@disroot.org
##     This file needed an overhaul after all the troubleshooting over several
##     months (both Mac OS and Linux).  I cleaned this up and also added some
##     settings copied from [vault-pgp] clone of this file which may fix some
##     issues I am having trying to get git-remote-gcrypt to work...  The
##     structure here is now simpler...  I hope I did not break anything!
##     I am on [MWM-work] now.  I will have to test this on Rodrigo next...
##     Still no fix for Emacs environment vars problem... Boot from shell works.

## 2019-002-16 - Alisha Awen siren1@disroot.org
##     Created this new file for Bash shell on any machine... Moved a lot of
##     stuff in here that was previously part of $HOME/.bashrc into here...
##     Now I know why I as experiencing so many shell related problems on
##     my old MacBook Pro from many years ago resulting in switching to Zsh. OMG!
#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## To enable/disable DEBUG logging change below to true/false respectively...
## It is on by default... You will probably need that in the beginning. ;-)
## If you need more debug statements elsewhere, use one of these as a template...

export SH_DBG=true

### ~~~~~~~~~~~~~~~~~~~~
## BEGIN: .bash_common Evaluation - Entering File
## DEBUG Print Statements: (Export SH_DBG=true (above) to enable)
if [ "$SH_DBG" = true ] ; then
    echo "BASH ENV - Entering & Evaluating:   \$DOTFILES/.bash_common"
fi
### ~~~~~~~~~~~~~~~~~~~~

## Set architecture flags to X86 64bit (all platforms):

export ARCHFLAGS="-arch x86_64"

## Define Local Go Language environment:
## (This needs to be before bin PATH definitions)
## If you use Go, un-comment the following and adjust path to your Go environment
## accordingly... (below is a simlink in home directory)
## Also: Make sure the Go related path line is defined in your $PATH below, using
## this ENVIRONMENT VAR here... (set by default)

# export GOPATH="$HOME/gopath"

### ~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  BEGIN: OS Specific Section:
### ~~~~~~~~~~~~~~~~~~~~~~~~~~~

if [[ "$OSTYPE" == "linux-gnu" ]]; then

    ### ~~~~~~~~~~~~~~~~~~~~
    ## BEGIN: Linux Specific Configs...
    ## DEBUG Print Statements: (Export SH_DBG=true (above) to enable)
    if [ "$SH_DBG" = true ] ; then
        echo "\$DOTFILES/.bash_common - BEGIN:  LINUX CASE"
    fi
    ### ~~~~~~~~~~~~~~~~~~~~

    ###
    ## Export Linux specific $PATH:
    ##   
    ##  NOTE1:  Update the single line Path definitions below, from other lines
    ##          that are sometimes programmatically added to the bottom of other
    ##          shell init files after installing things!  Don't let them get all
    ##          tangled up in different places! Keep them all here in one place!
    ##
    ##   NOTE2:  Make sure all /bin directory paths under `/user/local` occur
    ##           BEFORE `/usr/bin` directory paths within the export directive
    ##           below.
    ##
    ##   NOTE3:  You may need to make adjustments to the default path exports
    ##           below depending on your flavor of unix, and whether you have
    ##           some of the packages/plugins/binaries/libraries installed in a
    ##           different place. But for most cases, the exports already defined
    ##           below are the default paths on Linux and Mac OS.  The .rbenv
    ##           paths assume you installed .rbenv and used it to install ruby.
    ##           (change it if you don't want it) Remove $GOPATH below if you
    ##           DO NOT use Go Programming environment...

    export PATH="$HOME/.bin:$HOME/.local/bin:$HOME/.rbenv/bin:$HOME/.rbenv/plugins/ruby-build/bin:$GOPATH/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:$PATH"

    ###
    ## Qubes Split SSH:
    ## NOTE: This section is only used for Qubes OS machines that use Qubes App
    ##      Split SSH schemes...  If you do that, un-comment the lines in this
    ##      secton... if not you may safely remove this section...

    ## Set next line to the ssh key vault you want to use

#    SSH_VAULT_VM="add-your-ssh-VM-name-here"

    if [ "$SSH_VAULT_VM" != "" ]; then
	export SSH_AUTH_SOCK="/home/user/.SSH_AGENT_$SSH_VAULT_VM"
    fi

    ####
    ## Qubes Split GPG tweaks... If you use Qubes AND Split GPG
    ## Un-comment the alias tweaks below for convenient three letter alias...
    
#    alias gpq="qubes-gpg-client"
#    alias gpw="qubes-gpg-client-wrapper"

#    export QUBES_GPG_DOMAIN="add-your-PGP-VM-name-here"
#    export QUBES_GPG_AUTOACCEPT=86400

    ## Leave This Set As Is: This to ensure you are using GnuPG v2 not an
    ## older version which is No Longer Secure!!!

    alias gpg="/usr/bin/gpg2"

    ### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ##  Top Level Linux Machine Specific Exports:
    ##  NOTE: These must be defined before the
    ##        Generic Platform Independent
    ##        Exports are defined below!
    ##        (where these are referenced)
    ### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    ###
    ## Set GnuPG Environment Variable - for Linux programs to use:
    ## Most Linux "just works" when invoked with "gpg" but I need this Env Var
    ## for my .gitconfig which is used on many platforms including Qubes Split
    ## GPG which uses a wrapper program to invoke it....  Leave the setting
    ## below as-is unless you fit into a special case like the commented out
    ## setting below it...

    export GPG_PROG=gpg2
#    export GPG_PROG=qubes-gpg-client-wrapper

    ###
    ## Set Default Emacs for Linux programs to use:
    ## On Linux the setting below should "just work" fine...  However if emacs
    ## was not installed by Package Managers i.e., built from source in your home
    ## directory, etc., or different App name, you may have to add Env Vars
    ## and/or alter the path and/or App name in the export below:

    export EMACS=emacs
    export EMACSCLIENT=emacsclient

    ## Define Main GIT Home directory:
    ## (for all or most of your cloned git projects)

    export GIT=$HOME/GIT

    ## Define Main WWW directory:
    ## (for all or most of your web site and web app projects)

    export WWW=$HOME/WWW

    ### ~~~~~~~~~~~~~~~~~~~~
    ## END: Linux Specific Configs...
    ## DEBUG Print Statements: (Export SH_DBG=true (above) to enable)
    if [ "$SH_DBG" = true ] ; then
        echo "\$DOTFILES/.bash_common - END:    LINUX CASE"
    fi
    ### ~~~~~~~~~~~~~~~~~~~~

## END: IF [[ "$OSTYPE" == "LINUX-GNU" ]]; THEN

elif [[ "$OSTYPE" == "darwin"* ]]; then

    ### ~~~~~~~~~~~~~~~~~~~~
    ## BEGIN: Mac OS Specific Configs...
    ## DEBUG Print Statements: (Export SH_DBG=true (above) to enable)
    if [ "$SH_DBG" = true ] ; then
        echo "\$DOTFILES/.bash_common - BEGIN:  MAC-OS CASE"
    fi
    ### ~~~~~~~~~~~~~~~~~~~~

    ###
    ## Export Mac OS specific $PATH:
    ##  NOTE1:  Update the single line Path definitions below, from other lines
    ##          that are sometimes programmatically added to the bottom of other
    ##          shell init files after installing things!  Don't let them get all
    ##          tangled up in different places! Keep them all here in one place!
    ##
    ##  NOTE2:  Make sure all /bin directory paths under `/user/local` occur BEFORE
    ##          `/usr/bin` directory paths within the export directive below.  This
    ##          is mostly for the sake of Homebrew on Mac OS...
    ##
    ##  NOTE3:  You may need to make adjustments to the default path exports below
    ##          depending on your flavor of unix, and whether you have some of the
    ##          packages/plugins/binaries/libraries installed in a different place.
    ##          But for most cases, the exports already defined below are the default
    ##          paths on Linux and Mac OS.  The .rbenv paths assume you installed
    ##          .rbenv and used it to install ruby. It is required for Harmonic
    ##          Alchemy Modular Emacs... and also MacPorts!
    ##          (change it if you don't use or want them)

    ## Export Mac OS specific $PATH: (This may be different for older versions of Mac OS)

    export PATH="$HOME/.bin:$HOME/.local/bin:/usr/local/bin:/opt/local/bin:/opt/local/sbin:/Library/TeX/texbin:/usr/X11/bin:$PATH"

    ## Export GNU Info & MAN Paths: (This may be different for older versions of Mac OS)
    ## You probably don't need this unless you have manuals set in other places...

#    export INFOPATH="/usr/share/info:/usr/share/man:$INFOPATH"
#    export MANPATH="/usr/share/man:$MANPATH"

    ###
    ## Export LD_LIBRARY and PKG_CONFIG Path:
    ## (for MacPorts Users Only)
    ## If you use MacPorts, un-comment (enable) the two lines below:

#    export LD_LIBRARY_PATH=/opt/local/lib:$LD_LIBRARY_PATH
#    export PKG_CONFIG_PATH=/opt/local/lib/pkgconfig:$PKG_CONFIG_PATH

    ### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ##  Top Level MacOS Machine Specific Exports:
    ##  NOTE: These must be defined before the
    ##        Generic Platform Independent
    ##        Exports are defined below!
    ##        (where these are referenced)
    ### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    ###
    ## Set Gnupg Environment Variable - for MacOS programs to use:
    ## MacOS "just works" when invoked with "gpg" but I need this Env Var for my
    ## .gitconfig which is used on many platforms including Qubes Split GPG which
    ## uses a wrapper program to invoke it... Leave this setting as is unless you
    ## have some special case on MacOS that needs something else...

    export GPG_PROG=gpg2

    ###
    ## Set Default Emacs for MacOS programs to use:
    ## If not installed in standard MacOS Applications folder or built from
    ## source, or different App name, you may have to add Env Vars and/or alter
    ## the path and/or App name in the export below:
    ## for most cases however the /Contents/MacOS/Emacs part below won't change.

    export EMACS="/Applications/Emacs.app/Contents/MacOS/Emacs"
    export EMACSCLIENT="/Applications/Emacs.app/Contents/MacOS/bin/emacsclient"

    ## Define Main GIT Home directory:
    ## (for all or most of your cloned git projects)
    ## Adjust path below as needed...

    export GIT=$HOME/Documents/GIT

    ## Define Main WWW directory:
    ## (for all or most of your web site and web app projects)
    ## Adjust path below as needed...

    export WWW=$HOME/Documents/WWW
    
    ###
    ## Define Path to JACK2 Repo:
    ## If you use JACK2 (Jack Audio Connection Kit - for Mac based DAW),
    ## Un-comment the line below and adjust path as needed for your JACK2
    ## Installation.

#    export JACK='/Users/user-name/Documents/path-to-your/Jack-2-folder/github.src.repo'

    ### ~~~~~~~~~~~~~~~~~~~~
    ## END: Mac OS Specific Configs...
    ## DEBUG Print Statements: (Export SH_DBG=true (above) to enable)
    if [ "$SH_DBG" = true ] ; then
        echo "\$DOTFILES/.bash_common - END:    MAC-OS CASE"
    fi
    ### ~~~~~~~~~~~~~~~~~~~~

fi ## END: ELIF [[ "$OSTYPE" == "DARWIN"* ]]; THEN

### ~~~~~~~~~~~~~~~~~~~~~~~~~
##  END: OS Specific Section:
### ~~~~~~~~~~~~~~~~~~~~~~~~~

### ~~~~~~~~~~~~~~~~~~~~
## BEGIN: Generic Platform Independent Exports (all unix flavors):
## DEBUG Print Statements: (Export SH_DBG=true (above) to enable)
if [ "$SH_DBG" = true ] ; then
    echo "\$DOTFILES/.bash_common - BEGIN:  Final Generic Section"
fi
### ~~~~~~~~~~~~~~~~~~~~

###
## Export your PGP Primary Key Fingerprint for easy input for commands etc. 
## (remove if you don't use PGP)

export SFING="0xFFFFAAAA55550000FFFFAAAA55550000FFFFAAA"

## $EDITOR for all platforms.

export EDITOR=$EMACS

###
## Ensure GnuPG gets the output of the 'tty' command.
## (also remove if you don't use PGP)

export GPG_TTY=$(tty)

### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Platform Independent Global Directory Definitions:
# NOTE: These are suggested defaults... Adjust these
# as needed for your own environment setup...
# NOTE: These must be set AFTER the OS Specific 
#       Global Directory Defs are defined above...
#       If those are not defined first you will
#       see errors!
### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## Define Global Path to my Development SandBox (DSB)

export DSB=$GIT/your-dev-sandbox-directory-name

## Define Global Path to Tools folder (for tools like .dotfiles) home directory:

export TOOLS=$GIT/tools

## Define Global Path to public .dotfiles git repo. (where this file is)

export DF=$TOOLS/dotfiles

## Define Global Path to My-Docs" home Directory:

export MD=$GIT/My-Docs

## Define your www devOps home directory:

export DO=$WWW/devOps

## Define Global Path to your "Personal Templates" home Directory:

export PT=$GIT/Personal-templates

#### ~~~~~~~~~~~~~~~~~~~~
## Load NVM: (Node.js, NPM) etc... (disabled by default)
## NOTE: This section requires NVM/NPM to be installed...
##       (i.e. You cloned or installed 'creationix/nvm' from Github locally in
##        your $HOME environment.)
##
## This is needed for Harmonic Alchemy Modular Emacs, and YOU will eventually
## need this for some nice web-apps and tools as well!
## If you ARE or intend to use NVM/NPM than un-comment (enable) this section...

#### ~~~~~~~~~~~~~~~~~~~~
## DEBUG Print Statements: (Export SH_DBG=true (above) to enable)
# if [ "$SH_DBG" = true ] ; then
#    echo "\$DOTFILES/.bash_common - LOAD:   NVM Enviornment & Completions"
# fi
#### ~~~~~~~~~~~~~~~~~~~~

# export NVM_DIR="$HOME/.nvm"

###
## Load nvm:

# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

###
## Load NVM bash_completion:

# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

#### ~~~~~~~~~~~~~~~~~~~~
## Load rbenv Ruby Version Management Tool: (disabled by default)
## NOTE:  This section requires Ruby and rbenv to be installed...
##        If you intend to use Ruby and rbenv, un-comment (enable) this section
##        Make sure you have cloned rbenv from Github to $HOME/.rbenv!
##        If you do not use rbenv leave this section disabled AND remove the
##        the .rbenv path definition from above path export line as well!

#### ~~~~~~~~~~~~~~~~~~~~
## DEBUG Print Statements: (Export SH_DBG=true (above) to enable)
# if [ "$SH_DBG" = true ] ; then
#    echo "\$DOTFILES/.bash_common - LOAD:   Ruby Version Management Tool"
# fi
#### ~~~~~~~~~~~~~~~~~~~~

# if which rbenv > /dev/null; then
#    eval "$(rbenv init -)";
# fi

### ~~~~~~~~~~~~~~~~~~~~
## END: Generic Platform Independent Exports (all unix flavors):
## END: ~/.bash_common - Leaving File...
## DEBUG Print Statements: (Export SH_DBG=true (above) to enable)
if [ "$SH_DBG" = true ] ; then
    echo "\$DOTFILES/.bash_common - END:    Final Generic Section - Leaving File"
fi
### ~~~~~~~~~~~~~~~~~~~~

#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## END: $HOME/.bash_common
#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
